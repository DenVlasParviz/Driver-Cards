{"ast":null,"code":"import api from '@/services/authentication'; // наш axios‑инстанс\n\nconst state = {\n  products: []\n};\nconst mutations = {\n  initializeStore(state, newData) {\n    state.products = newData;\n  }\n};\nconst actions = {\n  async loadVehicle({\n    commit\n  }) {\n    try {\n      const response = await api.get(\"/api/info/card\");\n      commit(\"initializeStore\", response.data);\n      const nightDriverInfo = await Promise.all();\n    } catch (err) {\n      console.log(err);\n      if (err.response && err.response.status === 401) {\n        // this.$router.push('/login');\n      }\n    }\n  },\n  async addVehicle({\n    dispatch\n  }, payload) {\n    try {\n      const {\n        isNight,\n        ...driverData\n      } = payload;\n\n      // 1. Создаём водителя в PostgreSQL (Только те поля, которые есть в таблице)\n      const response = await api.post(\"/api/info/card\", driverData);\n      const driverId = response.data.id;\n\n      // 2. Сохраняем \"ночной режим\" в MongoDB, если передан\n      if (typeof isNight !== 'undefined') {\n        await api.post(`/night/${driverId}`, {\n          isNight\n        });\n      }\n\n      // 3. Обновляем список\n      dispatch(\"loadVehicle\");\n    } catch (err) {\n      console.error(\"Ошибка при добавлении водителя:\", err);\n    }\n  },\n  async removeVehicle({\n    dispatch\n  }, id) {\n    await api.delete(`/api/info/card/${id}`);\n    dispatch(\"loadVehicle\");\n  }\n};\nconst getters = {\n  getVehicleInfo(state) {\n    return state.products;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["api","state","products","mutations","initializeStore","newData","actions","loadVehicle","commit","response","get","data","nightDriverInfo","Promise","all","err","console","log","status","addVehicle","dispatch","payload","isNight","driverData","post","driverId","id","error","removeVehicle","delete","getters","getVehicleInfo","namespaced"],"sources":["C:/Users/Денис/Desktop/Programming/Lesson11/client/src/store/modules/vehicles.js"],"sourcesContent":["import api from '@/services/authentication';  // наш axios‑инстанс\n\n\n\nconst state = {\n  products: [],\n};\n\nconst mutations = {\n  initializeStore(state, newData) {\n    state.products = newData;\n  },\n};\n\nconst actions = {\n\n\n\n\n  async loadVehicle({ commit }) {\n    try {\n      const response = await api.get(\"/api/info/card\");\n      commit(\"initializeStore\", response.data);\n\n      const nightDriverInfo= await Promise.all()\n    }\n    catch (err) {\n      console.log(err);\n      if (err.response && err.response.status === 401) {\n        // this.$router.push('/login');\n\n      }\n    }\n  },\n\n  async addVehicle({ dispatch }, payload) {\n    try {\n      const { isNight, ...driverData } = payload;\n\n      // 1. Создаём водителя в PostgreSQL (Только те поля, которые есть в таблице)\n      const response = await api.post(\"/api/info/card\", driverData);\n      const driverId = response.data.id;\n\n      // 2. Сохраняем \"ночной режим\" в MongoDB, если передан\n      if (typeof isNight !== 'undefined') {\n        await api.post(`/night/${driverId}`, { isNight });\n      }\n\n      // 3. Обновляем список\n      dispatch(\"loadVehicle\");\n    } catch (err) {\n      console.error(\"Ошибка при добавлении водителя:\", err);\n    }\n  },\n\n\n  async removeVehicle({ dispatch }, id) {\n    await api.delete(`/api/info/card/${id}`);\n    dispatch(\"loadVehicle\");\n  },\n};\n\nconst getters = {\n  getVehicleInfo(state) {\n    return state.products;\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,2BAA2B,CAAC,CAAE;;AAI9C,MAAMC,KAAK,GAAG;EACZC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,SAAS,GAAG;EAChBC,eAAeA,CAACH,KAAK,EAAEI,OAAO,EAAE;IAC9BJ,KAAK,CAACC,QAAQ,GAAGG,OAAO;EAC1B;AACF,CAAC;AAED,MAAMC,OAAO,GAAG;EAKd,MAAMC,WAAWA,CAAC;IAAEC;EAAO,CAAC,EAAE;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,gBAAgB,CAAC;MAChDF,MAAM,CAAC,iBAAiB,EAAEC,QAAQ,CAACE,IAAI,CAAC;MAExC,MAAMC,eAAe,GAAE,MAAMC,OAAO,CAACC,GAAG,CAAC,CAAC;IAC5C,CAAC,CACD,OAAOC,GAAG,EAAE;MACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChB,IAAIA,GAAG,CAACN,QAAQ,IAAIM,GAAG,CAACN,QAAQ,CAACS,MAAM,KAAK,GAAG,EAAE;QAC/C;MAAA;IAGJ;EACF,CAAC;EAED,MAAMC,UAAUA,CAAC;IAAEC;EAAS,CAAC,EAAEC,OAAO,EAAE;IACtC,IAAI;MACF,MAAM;QAAEC,OAAO;QAAE,GAAGC;MAAW,CAAC,GAAGF,OAAO;;MAE1C;MACA,MAAMZ,QAAQ,GAAG,MAAMT,GAAG,CAACwB,IAAI,CAAC,gBAAgB,EAAED,UAAU,CAAC;MAC7D,MAAME,QAAQ,GAAGhB,QAAQ,CAACE,IAAI,CAACe,EAAE;;MAEjC;MACA,IAAI,OAAOJ,OAAO,KAAK,WAAW,EAAE;QAClC,MAAMtB,GAAG,CAACwB,IAAI,CAAC,UAAUC,QAAQ,EAAE,EAAE;UAAEH;QAAQ,CAAC,CAAC;MACnD;;MAEA;MACAF,QAAQ,CAAC,aAAa,CAAC;IACzB,CAAC,CAAC,OAAOL,GAAG,EAAE;MACZC,OAAO,CAACW,KAAK,CAAC,iCAAiC,EAAEZ,GAAG,CAAC;IACvD;EACF,CAAC;EAGD,MAAMa,aAAaA,CAAC;IAAER;EAAS,CAAC,EAAEM,EAAE,EAAE;IACpC,MAAM1B,GAAG,CAAC6B,MAAM,CAAC,kBAAkBH,EAAE,EAAE,CAAC;IACxCN,QAAQ,CAAC,aAAa,CAAC;EACzB;AACF,CAAC;AAED,MAAMU,OAAO,GAAG;EACdC,cAAcA,CAAC9B,KAAK,EAAE;IACpB,OAAOA,KAAK,CAACC,QAAQ;EACvB;AACF,CAAC;AAED,eAAe;EACb8B,UAAU,EAAE,IAAI;EAChB/B,KAAK;EACLE,SAAS;EACTG,OAAO;EACPwB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}