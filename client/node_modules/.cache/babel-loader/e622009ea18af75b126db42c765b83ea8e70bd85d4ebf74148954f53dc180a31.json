{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport api from '@/services/authentication'; // наш axios‑инстанс\n\nconst state = {\n  products: []\n};\nconst mutations = {\n  initializeStore(state, newData) {\n    state.products = newData;\n  }\n};\nconst actions = {\n  async loadVehicle({\n    commit\n  }) {\n    try {\n      const response = await api.get(\"/api/info/card\");\n      commit(\"initializeStore\", response.data);\n      const nightDriverInfo = await Promise.all(drivers.map(async driver => {\n        try {\n          const nightResponse = await api.get(`/night/${driver.id}`);\n          return {\n            ...driver,\n            isNight: nightResponse.data.isNight\n          };\n        } catch (error) {\n          console.warn(`Не удалось загрузить isNight для водителя ${driver.id}`);\n          return {\n            ...driver,\n            isNight: false\n          };\n        }\n      }));\n    } catch (err) {\n      console.log(err);\n      if (err.response && err.response.status === 401) {\n        // this.$router.push('/login');\n      }\n    }\n  },\n  async addVehicle({\n    dispatch\n  }, payload) {\n    try {\n      const {\n        isNight,\n        ...driverData\n      } = payload;\n\n      // 1. Создаём водителя в PostgreSQL (Только те поля, которые есть в таблице)\n      const response = await api.post(\"/api/info/card\", driverData);\n      const driverId = response.data.id;\n\n      // 2. Сохраняем \"ночной режим\" в MongoDB, если передан\n      if (typeof isNight !== 'undefined') {\n        await api.post(`/night/${driverId}`, {\n          isNight\n        });\n      }\n\n      // 3. Обновляем список\n      dispatch(\"loadVehicle\");\n    } catch (err) {\n      console.error(\"Ошибка при добавлении водителя:\", err);\n    }\n  },\n  async removeVehicle({\n    dispatch\n  }, id) {\n    await api.delete(`/api/info/card/${id}`);\n    dispatch(\"loadVehicle\");\n  }\n};\nconst getters = {\n  getVehicleInfo(state) {\n    return state.products;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["api","state","products","mutations","initializeStore","newData","actions","loadVehicle","commit","response","get","data","nightDriverInfo","Promise","all","drivers","map","driver","nightResponse","id","isNight","error","console","warn","err","log","status","addVehicle","dispatch","payload","driverData","post","driverId","removeVehicle","delete","getters","getVehicleInfo","namespaced"],"sources":["C:/Users/Денис/Desktop/Programming/Lesson11/client/src/store/modules/vehicles.js"],"sourcesContent":["import api from '@/services/authentication';  // наш axios‑инстанс\n\n\n\nconst state = {\n  products: [],\n};\n\nconst mutations = {\n  initializeStore(state, newData) {\n    state.products = newData;\n  },\n};\n\nconst actions = {\n\n\n\n\n  async loadVehicle({ commit }) {\n    try {\n      const response = await api.get(\"/api/info/card\");\n      commit(\"initializeStore\", response.data);\n\n      const nightDriverInfo= await Promise.all(drivers.map(async (driver) => {\n        try{\n          const nightResponse = await api.get(`/night/${driver.id}`);\n          return{\n            ...driver,\n            isNight: nightResponse.data.isNight,\n          };\n\n        }catch (error){\n          console.warn(`Не удалось загрузить isNight для водителя ${driver.id}`);\n          return{\n            ...driver,\n            isNight: false,\n          }\n        }\n      }))\n    }\n    catch (err) {\n      console.log(err);\n      if (err.response && err.response.status === 401) {\n        // this.$router.push('/login');\n\n      }\n    }\n  },\n\n  async addVehicle({ dispatch }, payload) {\n    try {\n      const { isNight, ...driverData } = payload;\n\n      // 1. Создаём водителя в PostgreSQL (Только те поля, которые есть в таблице)\n      const response = await api.post(\"/api/info/card\", driverData);\n      const driverId = response.data.id;\n\n      // 2. Сохраняем \"ночной режим\" в MongoDB, если передан\n      if (typeof isNight !== 'undefined') {\n        await api.post(`/night/${driverId}`, { isNight });\n      }\n\n      // 3. Обновляем список\n      dispatch(\"loadVehicle\");\n    } catch (err) {\n      console.error(\"Ошибка при добавлении водителя:\", err);\n    }\n  },\n\n\n  async removeVehicle({ dispatch }, id) {\n    await api.delete(`/api/info/card/${id}`);\n    dispatch(\"loadVehicle\");\n  },\n};\n\nconst getters = {\n  getVehicleInfo(state) {\n    return state.products;\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"],"mappings":";;AAAA,OAAOA,GAAG,MAAM,2BAA2B,CAAC,CAAE;;AAI9C,MAAMC,KAAK,GAAG;EACZC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,SAAS,GAAG;EAChBC,eAAeA,CAACH,KAAK,EAAEI,OAAO,EAAE;IAC9BJ,KAAK,CAACC,QAAQ,GAAGG,OAAO;EAC1B;AACF,CAAC;AAED,MAAMC,OAAO,GAAG;EAKd,MAAMC,WAAWA,CAAC;IAAEC;EAAO,CAAC,EAAE;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,gBAAgB,CAAC;MAChDF,MAAM,CAAC,iBAAiB,EAAEC,QAAQ,CAACE,IAAI,CAAC;MAExC,MAAMC,eAAe,GAAE,MAAMC,OAAO,CAACC,GAAG,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;QACrE,IAAG;UACD,MAAMC,aAAa,GAAG,MAAMlB,GAAG,CAACU,GAAG,CAAC,UAAUO,MAAM,CAACE,EAAE,EAAE,CAAC;UAC1D,OAAM;YACJ,GAAGF,MAAM;YACTG,OAAO,EAAEF,aAAa,CAACP,IAAI,CAACS;UAC9B,CAAC;QAEH,CAAC,QAAOC,KAAK,EAAC;UACZC,OAAO,CAACC,IAAI,CAAC,6CAA6CN,MAAM,CAACE,EAAE,EAAE,CAAC;UACtE,OAAM;YACJ,GAAGF,MAAM;YACTG,OAAO,EAAE;UACX,CAAC;QACH;MACF,CAAC,CAAC,CAAC;IACL,CAAC,CACD,OAAOI,GAAG,EAAE;MACVF,OAAO,CAACG,GAAG,CAACD,GAAG,CAAC;MAChB,IAAIA,GAAG,CAACf,QAAQ,IAAIe,GAAG,CAACf,QAAQ,CAACiB,MAAM,KAAK,GAAG,EAAE;QAC/C;MAAA;IAGJ;EACF,CAAC;EAED,MAAMC,UAAUA,CAAC;IAAEC;EAAS,CAAC,EAAEC,OAAO,EAAE;IACtC,IAAI;MACF,MAAM;QAAET,OAAO;QAAE,GAAGU;MAAW,CAAC,GAAGD,OAAO;;MAE1C;MACA,MAAMpB,QAAQ,GAAG,MAAMT,GAAG,CAAC+B,IAAI,CAAC,gBAAgB,EAAED,UAAU,CAAC;MAC7D,MAAME,QAAQ,GAAGvB,QAAQ,CAACE,IAAI,CAACQ,EAAE;;MAEjC;MACA,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAE;QAClC,MAAMpB,GAAG,CAAC+B,IAAI,CAAC,UAAUC,QAAQ,EAAE,EAAE;UAAEZ;QAAQ,CAAC,CAAC;MACnD;;MAEA;MACAQ,QAAQ,CAAC,aAAa,CAAC;IACzB,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACZF,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEG,GAAG,CAAC;IACvD;EACF,CAAC;EAGD,MAAMS,aAAaA,CAAC;IAAEL;EAAS,CAAC,EAAET,EAAE,EAAE;IACpC,MAAMnB,GAAG,CAACkC,MAAM,CAAC,kBAAkBf,EAAE,EAAE,CAAC;IACxCS,QAAQ,CAAC,aAAa,CAAC;EACzB;AACF,CAAC;AAED,MAAMO,OAAO,GAAG;EACdC,cAAcA,CAACnC,KAAK,EAAE;IACpB,OAAOA,KAAK,CAACC,QAAQ;EACvB;AACF,CAAC;AAED,eAAe;EACbmC,UAAU,EAAE,IAAI;EAChBpC,KAAK;EACLE,SAAS;EACTG,OAAO;EACP6B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}